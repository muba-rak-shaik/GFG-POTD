Problem Description : Largest rectangular sub-matrix whose sum is 0

Given a matrix mat[][] of size N x M. The task is to find the largest rectangular sub-matrix by area whose sum is 0.

If there are multiple solutions return the rectangle which starts from minimum column index. If you still have multiple solutions return the one having greatest row number. If no such matrix is present return a zero (0) size matrix.

Example 1:

Input: N = 3, M = 3
mat[][] =  1, 2, 3
          -3,-2,-1
           1, 7, 5

Output:  1, 2, 3
        -3,-2,-1

Explanation: This is the largest sub-matrix,
whose sum is 0.

### Solution in Python: ###

from typing import List
class Solution:
    def kadne(self, v: List[int]) -> tuple:
        # Initialize variables for Kadane's algorithm
        sum = 0
        max_sum = -float("inf")
        left = 0
        right = -1
        start = 0
        # Iterate through the list
        for i in range(len(v)):
            sum += v[i]
            # Update maximum sum and corresponding indices
            if sum > max_sum:
                max_sum = sum
                left = start
                right = i
            # If current sum becomes negative, reset sum and update starting index
            if sum < 0:
                sum = 0
                start = i + 1
        # Return the tuple containing the left and right indices of the maximum sum subarray
        return left, right
    def sumZeroMatrix(self, a: List[List[int]]) -> List[List[int]]:
        # Get the dimensions of the input matrix
        m = len(a)
        n = len(a[0])
        # Initialize variables for the maximum submatrix with zero sum
        left = right = up = down = 0
        # Iterate through all possible combinations of columns
        for i in range(n):
            # Initialize an array to store the cumulative sum of each row
            arr = [0] * m
            # Iterate through columns from i to n
            for j in range(i, n):
                # Update the cumulative sum of each row for the current submatrix
                for k in range(m):
                    arr[k] += a[k][j]
                # Apply Kadane's algorithm efficiently using a hashmap
                sum_map = {0: -1}
                l = r = 0
                curr_sum = 0
                for k in range(m):
                    curr_sum += arr[k]
                    if curr_sum in sum_map:
                        # Update indices if a subarray with zero sum is found
                        if k - sum_map[curr_sum] > r - l:
                            l = sum_map[curr_sum] + 1
                            r = k + 1
                    else:
                        sum_map[curr_sum] = k
                # Update indices if the current submatrix has a larger area
                if (j - i + 1) * (r - l) > (right - left) * (down - up):
                    up = l
                    down = r
                    left = i
                    right = j + 1
        # Extract the maximum submatrix with zero sum from the input matrix
        result = []
        for i in range(up, down):
            row = []
            for j in range(left, right):
                row.append(a[i][j])
            result.append(row)
        # Return the result matrix
        return result
