Problem Description: Anti Diagonal Traversal of Matrix (Medium)

Give a N*N square matrix, return an array of its anti-diagonals in top-leftmost to bottom-rightmost order. In an element of a anti-diagonal (i, j), surrounding elements will be (i+1, j-1) and (i-1, j+1). Look at the examples for more clarity.

Example 1:

Input:
N = 2
matrix[][] = 1 2
            3 4
Output:
1 2 3 4
Explanation:
List of anti-diagnoals in order is
{1}, {2, 3}, {4}
Example 2:

Input:
N = 3
matrix[][] = 3 2 3
            4 5 1
            7 8 9
Output:
3 2 4 3 5 7 1 8 9
Explanation:
List of anti-diagnoals in order is
{3}, {2, 4}, {3, 5, 7}, {1, 8}, {9}
Your Task:
You dont need to read input or print anything. Complete the function antiDiagonalPattern() that takes matrix as input parameter and returns a list of integers in order of the values visited in the anti-Diagonal pattern. 

Expected Time Complexity: O(N * N)
Expected Auxiliary Space: O(N * N)
 

Constraints:
1 <= N <= 100
0 <= mat[i][j] <= 100

### Solution in Python3: ###

class Solution:
    def antiDiagonalPattern(self, matrix):
        # Initialize an empty list to store the anti-diagonal elements
        anti_diagonal_elements = []

        # Set to keep track of visited indices
        visited_indices = set()

        # Loop through the rows of the matrix
        for row in range(len(matrix)):
            # Loop through the columns of the matrix
            for col in range(len(matrix)):
                # Check if the current index is not visited
                if (row, col) not in visited_indices:
                    # Initialize variables for traversing the anti-diagonal
                    current_row = row
                    current_col = col

                    # Traverse the anti-diagonal and add elements to the list
                    while current_col >= 0:
                        # Check bounds to avoid index errors
                        if current_row < len(matrix) and current_col >= 0:
                            anti_diagonal_elements.append(matrix[current_row][current_col])

                        # Mark the current index as visited
                        visited_indices.add((current_row, current_col))

                        # Move to the next position in the anti-diagonal
                        current_row += 1
                        current_col -= 1

        # Return the list of anti-diagonal elements
        return anti_diagonal_elements
