Problem Description : Winner of an election (Easy)

Given an array of n names arr of candidates in an election, where each name is a string of lowercase characters. A candidate name in the array represents a vote casted to the candidate. Print the name of the candidate that received the maximum count of votes. If there is a draw between two candidates, then print lexicographically smaller name.

Example 1:

Input:
n = 13
arr[] = {john,johnny,jackie,johnny,john 
jackie,jamie,jamie,john,johnny,jamie,
johnny,john}
Output: john 4
Explanation: john has 4 votes casted for 
him, but so does johny. john is 
lexicographically smaller, so we print 
john and the votes he received.
Example 2:

Input:
n = 3
arr[] = {andy,blake,clark}
Output: andy 1
Explanation: All the candidates get 1 
votes each. We print andy as it is 
lexicographically smaller.
Your Task:
You only need to complete the function winner() that takes an array of strings arr, and length of arr n as parameters and returns an array of string of length 2. First element of the array should be the name of the candidate and second element should be the number of votes that candidate got in string format.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= n <= 105
1 <= |arri| <= 105

### Solution in Python3 : ###

from collections import Counter

class Solution:
    def winner(self, array, size):
        # Count the frequency of each element in the array
        frequency_counter = Counter(array)

        # Initialize an empty list to store elements with the maximum frequency
        max_frequency_elements = []

        # Find the maximum frequency in the Counter
        max_frequency = max(frequency_counter.values())

        # Iterate through the items in the frequency counter
        for element, freq in frequency_counter.items():
            # Check if the frequency of the current element is equal to the maximum frequency
            if freq == max_frequency:
                # Append the element and its frequency to the list
                max_frequency_elements.append([element, freq])

        # If there is only one element with the maximum frequency, return it
        if len(max_frequency_elements) == 1:
            return max_frequency_elements[0]

        # Sort the list of elements with the maximum frequency based on the element value
        max_frequency_elements.sort(key=lambda x: x[0])

        # Return the element with the minimum value among those with the maximum frequency
        return max_frequency_elements[0]
