Problem Description: Insertion Sort for Singly Linked Listc(Medium)

Given a singly linked list, sort the list (in ascending order) using insertion sort algorithm.

Example 1:

Input:
N = 10
Linked List = 30->23->28->30->11->14->
              19->16->21->25 
Output : 
11 14 16 19 21 23 25 28 30 30 
Explanation :
The resultant linked list is sorted.
Example 2:

Input : 
N = 7
Linked List=19->20->16->24->12->29->30 
Output : 
12 16 19 20 24 29 30 
Explanation : 
The resultant linked list is sorted.
Your task:
You don't need to read input or print anything. Your task is to complete the function insertionSort() which takes the head of the linked list, sorts the list using insertion sort algorithm and returns the head of the sorted linked list.
 
Expected Time Complexity : O(n2)
Expected Auxiliary Space : O(1)
 
Constraints:
0 <= n <= 5*103

### Solution in Python3 : ###

class Solution:
    def insertionSort(self, head):
        dummy = Node(-1)
        dummy.next = head
        temp = head
        prev = head
        temp = temp.next
        while(temp != None):
            if temp.data < prev.data:
                prev2 = dummy
                temp2 = dummy.next
                while(temp2.data < temp.data):
                    temp2 = temp2.next
                    prev2 = prev2.next
                prev.next = temp.next
                prev2.next = temp
                temp.next = temp2
                temp = prev.next
            else:
                prev = prev.next
                temp = temp.next
        return dummy.next
